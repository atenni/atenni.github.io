name: Convert Issue to Blog Post

# ======================================================================
# WORKFLOW RELATIONSHIPS
# ======================================================================
# This workflow is part of a publishing pipeline:
#
# 1. This workflow (issue-to-post.yaml):
#    - Triggers when a specific GitHub Issue is closed
#    - Creates a new blog post based on the issue content
#    - Commits and pushes the new post to the repository
#
# 2. When this workflow pushes to main, it automatically triggers:
#    - The deploy.yaml workflow, which builds and deploys the site
#
# This creates an implicit chain:
#   Issue closed → issue-to-post → [push to repo] → deploy workflow → [site deployed]
#
# No explicit workflow_call or workflow_dispatch dependencies are needed
# as GitHub's event system handles the chain through the push event.
# ======================================================================

on:
  issues:
    types: [closed]

# Permissions needed to create commits, push to the repository, and add a success comment
# to the issue.
permissions:
  contents: write
  issues: write

jobs:
  create-post:
    # Only run when:
    # 1. The issue creator is @atenni (for security)
    # 2. The closed issue has one of our blog-related labels
    if: >
      github.event.issue.user.login == 'atenni' &&
      (contains(github.event.issue.labels.*.name, 'blog:post') ||
      contains(github.event.issue.labels.*.name, 'blog:til') ||
      contains(github.event.issue.labels.*.name, 'blog:quote'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract issue information
        id: issue
        run: |
          # Extract the issue title and convert to lowercase with hyphens
          # Remove special characters, replace spaces with hyphens, and collapse multiple hyphens to one
          # Example: "one%$^ two---three" -> "one-two-three"
          TITLE="${{ github.event.issue.title }}"
          SLUG=$(echo "$TITLE" \
            | tr '[:upper:]' '[:lower:]' \
            | sed 's/[^a-z0-9 -]//g' \
            | sed 's/ /-/g' \
            | sed 's/-\{2,\}/-/g' \
            | sed 's/^-\|-$//g')

          # Get today's date in YYYY-MM-DD format
          DATE=$(date +%Y-%m-%d)

          # Determine post type based on labels
          if [[ "${{ contains(github.event.issue.labels.*.name, 'blog:post') }}" == "true" ]]; then
            POST_TYPE="post"
            POST_DIR="posts/_posts"
          elif [[ "${{ contains(github.event.issue.labels.*.name, 'blog:til') }}" == "true" ]]; then
            POST_TYPE="til"
            POST_DIR="til/_posts"
          elif [[ "${{ contains(github.event.issue.labels.*.name, 'blog:quote') }}" == "true" ]]; then
            POST_TYPE="quote"
            POST_DIR="quoting/_posts"
          fi

          echo "DATE=$DATE" >> "$GITHUB_OUTPUT"
          echo "SLUG=$SLUG" >> "$GITHUB_OUTPUT"
          echo "POST_TYPE=$POST_TYPE" >> "$GITHUB_OUTPUT"
          echo "POST_DIR=$POST_DIR" >> "$GITHUB_OUTPUT"
          echo "FILENAME=${DATE}-${SLUG}.md" >> "$GITHUB_OUTPUT"
          echo "FILEPATH=${POST_DIR}/${DATE}-${SLUG}.md" >> "$GITHUB_OUTPUT"

      - name: Create post file
        id: create-post
        run: |
          # Create directory if it doesn't exist
          mkdir -p "${{ steps.issue.outputs.POST_DIR }}"

          # Write the issue body to the post file unchanged (front matter is already present in the issue body)
          printf "%s\n" "${{ github.event.issue.body }}" > "${{ steps.issue.outputs.FILEPATH }}"

          echo "Created post at ${{ steps.issue.outputs.FILEPATH }}"

      - name: Configure Git
        run: |
          # Act as the GitHub Actions bot user
          # See: https://github.com/actions/checkout/blob/main/README.md#push-a-commit-using-the-built-in-token
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Commit and push new post
        env:
          ADMIN_PAT__GIT_PUSH: ${{ secrets.ADMIN_PAT__GIT_PUSH }}
        run: |
          # Branch protection rules in this repo prevent direct pushes to main, except for admins.
          # Use an admin's PAT with `git push` permissions for this step:
          git remote set-url origin https://x-access-token:${ADMIN_PAT__GIT_PUSH}@github.com/${{ github.repository }}

          git add "${{ steps.issue.outputs.FILEPATH }}"
          git commit -m \
            "ci: add new ${{ steps.issue.outputs.POST_TYPE }} from issue #${{ github.event.issue.number }}" \
            || { echo "::notice::Nothing to commit"; exit 0; }
          git push

          echo "::notice::Post created and pushed to repository. This will trigger the \"Deploy…\" workflow if pushed to main."

      - name: Add comment to issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ github.token }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ Successfully created a new blog post from this issue!\n\nPost file: \`${{ steps.issue.outputs.FILENAME }}\`\n\nThe post will be automatically published when the deploy workflow completes.`
            })
